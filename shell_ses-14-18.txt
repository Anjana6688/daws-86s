
                                                      Session -14:
==================================================================================================================================================================
Automation Goals : 
1.Speed
2.Accuracy
3.no human errors
3.consistency
4.sacalbility,can work for infinte servers 
5.documentation (Everything is recorded what happend includig history)
6.reusability

Where to store Scripts?
If you store it in local device/server what are the consequencies?
1. Secuirty issue,
2.Can't share with others and if server or system crashes we will lose the scripts.
3. version control if we commit changes to the same code then we don't know what inital changes we have done?

To overcome these we use Repositories/version control systems.
Types of version control systems?
1.SVN(Drawbacks is we can push directly to the SVN we can store it in Local)
2.git (It is a concept developed by linus torwarlds and leave it as open source and this is further used by below vendors)
GitHub -->It is also a opensource and it is purchased by Microsoft
Bitbucket
Gitlab

For windows we use git bash.
How to download it in local device?
git clone <Url of the code which you want to download in your Laptop>

AnjanaRajasekhar@DESKTOP-NQ5FK5B MINGW64 /c/devops/daws-86s
$ git clone https://github.com/Anjana6688/Shell-Prac-Daws-86s.git
Cloning into 'Shell-Prac-Daws-86s'...
warning: You appear to have cloned an empty repository.

If we give ls -la command we will find .git hidden files which means its a git repo.
In Git there is a concept called Branching,if we want to do any changes to the existing code instead of applying changes to direct code we can create branches and dummy brnaches we can apply changes and if its wroks fine we will commit to main branch)
IDE tool
eclipse
notepad++
vscode

How code to be push?
vscode -->workspace --> staging area --> commit to local repo --> central repo

what is Staging area?
It's a temporary area ,where we can stage the required files for commit so if you think still needs to changes in the code you can do it here.
clone the repo
add to staging area -> git add
commit to local -> git commit -

what is local commit?
commit into local repository nothing but laptop. commit time will be logged, who commited will be logged, why they commited also will be logged

push to central/remote repo?

push to central repo..others can just run git pull(pull the changes from central to local repo

git clone vs git pull
=====================
clone -> first time downloading the code then we can use clone
pull -> if you did any changes in the same code and if you want to down load thenjust pull the changes

staging area -> git add <file-name> by using this command it will track your scripts in your local PC
AnjanaRajasekhar@DESKTOP-NQ5FK5B MINGW64 /c/devops/daws-86s/repos/Shell-Prac-Daws-86s (main)
$ git status
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        helloworld.sh

nothing added to commit but untracked files present (use "git add" to track)

AnjanaRajasekhar@DESKTOP-NQ5FK5B MINGW64 /c/devops/daws-86s/repos/Shell-Prac-Daws-86s (main)
$ git add helloworld.sh
warning: in the working copy of 'helloworld.sh', LF will be replaced by CRLF the next time Git touches it


local commit -> git commit -m "first commit, hello world started"
The code is still in the local but what are the changes you are doing we can commit it which means its simply store what are your inital change and we can observe in git log.

push to central repo -> git push origin main
It will push the code from local repo(git bash )central repo (git hub).

steps followed till now
1. signup to github
2. install vs code
3. open folder in vs code where you store all repos
create repo in github
4. clone the repo
5. do some code
6. add to staging area
7. commit to local repo
8. push to central repo
                                                      SESSION-15
=======================================================================================================================================================================
All scripts are in git repo:https://github.com/Anjana6688/Shell-Prac-Daws-86s/tree/main#
 git add . ; git commit -m "variable with arugments" ; git push origin main

Variable Declaration:
=======================
VAR_NAME=VALUE
$VAR_NAME
${VAR_NAME}
ex: PERSON1="SAIRAM"
if you want to pass the aruguments via CLI you can use $1 ,$2 and in CLI you can <script.sh> ramu somu
For Example:
           PERSON1=$1
           PERSON2=$2
--> read command we can use incase of user input it has many features suppose password we can enter without printing in the CLI.
 Environment Variables:
===========================
Envronment varibles are persists/active untill the session running.
if you want to add the environment variables permanently you can define that variables under home folder you can give ls -la 
then you can see the hidden files in that edit the bashrc file
vim .bashrc
add your environment variable ---> export COURSE="DevOps"
and then source it source .bashrc after sourcing if you exit the session also we can see the variable.

Contained within the shell in which they are defined and not inherited by child processes.
Purpose: They are commonly used for:
Storing configuration parameters (e.g., database credentials, API keys).
Defining paths for executables (e.g., PATH).
Setting system-wide or user-specific preferences.

Common Environment Variables:
PATH: Specifies directories where the shell searches for executable commands.
HOME: The user's home directory.
USER or LOGNAME: The name of the current user.
LANG: The current locale settings.
TERM: The current terminal emulation.

Special Variables:
=====================
Special variables are already defined variables in shell
Below all these special variable will be ask in interview.
If i want pass multiple inputs to the script you can use below lines
echo "All variables passed to the script: $@"
echo "All variables passed to the script: $*"

If you want to print the script name use below comnd
echo "Script name: $0"
ramaining commands are self explinatory
echo "Current directory: $PWD"
echo "Who is running this: $USER"
echo "Home directory of user: $HOME"
echo "PID of this script: $$"
sleep 50 &
echo "PID of the last command in background is: $!"

command: sh 08-Var-Special.sh anjana hahsjjkfdsj bvmjfvhjdfkghgf
OUTPUT:
======
All variables passed to the script: anjana hahsjjkfdsj bvmjfvhjdfkghgf
All variables passed to the script: anjana hahsjjkfdsj bvmjfvhjdfkghgf
Script name: 08-Var-Special.sh
Current directory: /home/ec2-user/Shell-Prac-Daws-86s
Who is running this: ec2-user
Home directory of user: /home/ec2-user
PID of this script: 2295
PID of the last command in background is: 2296

Data Types:
==============
There is NO Datatypes in shell script.Generally all scripts will take as string.
But based on our inputs shell individually thing about their data type.
for example:
NUMBER1=200
NUMBER2=300
NUMBER3="anjana"
Here though you defined as character for NUMBER3 it will treat as numberic becoz below we are doing is addition.so it will conside number 3 as 0

SUM=$(($NUMBER1+$NUMBER2+$NUMBER3))

ARRAYS:
========
Arrays in shell scripts allow the storage of multiple values within a single variable. 

Ex: MY_ARRAY=("ANJANA" "Pranavi" "SAIRAM")
Want to print array syntax: echo "${MY_ARRAY[0]}
0 is for particular index, 0=anjana,1=pranavi,2=sairam
Print all elements use below command:
echo "Printing all family members ${MY_ARRAY[@]}"
Print only one element
echo "KID in our family:${MY_ARRAY[1]}"






